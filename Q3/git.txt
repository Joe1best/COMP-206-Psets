A) Git helps out here since both developers can use the concept of branching. Both developers can 
create their own branch via the following steps: 
	1) git branch (to see what branches they can work on)
	2) git checkout <branch_name/new_branch_name> (Join a branch or create a new branch)

Now both developers work on two different branches and can push/pull freely on their branch, since
it would only be affected on each of their respective branch. This can be done by using the following
stream of commands
	3) git add <filename>, git commit -m"[Message]" , git push

At the end, we can split in two cases depending on how the project is going. 

a) If both developers are working on the same part of replace.c, they can use
	4) git diff <latest_commit_developer_1> <latest_commit_developer_2> 
to see the difference and figure out the conflicts together. Or whoever gets the replace.c file to 
work, can just go back to the main branch again and run 
	5) git checkout master
	6) git merge <branch_name>
and delete the other branch by running (after informing the other user of course)
	7) git branch -D <branch_name>

b) If both developers are working on different parts of the replace.c, they can both just merge at 
the end using command 5) and 6) and there wont be any merge conflicts. 


B) In this case, we can create a new file in any of the branches and incorporate both changes manually 
(can see the different branches using git diff as discussed before)then we just commit this file in 
the chosen branch and merge to master.  
